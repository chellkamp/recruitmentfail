@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using RecruitmentFailWeb.Models.Account;

@model ChangePasswordDetails
@{
    ViewData["Title"] = "Change User Password";
}

<div class="container">
    @using(Html.BeginForm("ChangePassword", "AccountAPI", FormMethod.Post, new {@id="changeForm"}))
    {
        <div class="row my-2">
            <div class="text-danger col-md-8 response-error"></div>
        </div>
        <div class="row my-2">
            @Html.ValidationSummary(true, null, new {@class="text-danger col-md-8"})
        </div>

        <div class="row my-2">
            @Html.LabelFor(m => m.OldPassword, null, new {@class="control-label col-md-3"})
            <div class="col-md-5 form-group">
                @Html.PasswordFor(m => m.OldPassword, new {@class="form-control"})
                @Html.ValidationMessageFor(m => m.OldPassword, null, new {@class="text-danger"})
            </div>
        </div>
        <div class="row my-2">
            @Html.LabelFor(m => m.NewPassword, null, new {@class="control-label col-md-3"})
            <div class="form-group col-md-5">
                @Html.PasswordFor(m => m.NewPassword, new {@class="form-control"})
                @Html.ValidationMessageFor(m => m.NewPassword, null, new {@class="text-danger"})
            </div>
        </div>
        <div class="row my-2">
            @Html.LabelFor(m => m.NewPasswordConfirm, null, new {@class="control-label col-md-3"})
            <div class="form-group col-md-5">
                @Html.PasswordFor(m => m.NewPasswordConfirm, new {@class="form-control"})
                @Html.ValidationMessageFor(m => m.NewPasswordConfirm, null, new {@class="text-danger"})
            </div>
        </div>


        <div class="row my-4">
            <div class="text-end col-md-8">
                <button type="button" value="Submit Change" class="submit btn btn-primary">Submit Change</button>
            </div>
        </div>
    }
</div>

<div id="successDlg" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Password Changed</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Password successfully changed.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>

        // custom validation
        $.validator.addMethod('cognitopassword', RecruitmentFailValidation.validateCognitoPassword);
        $.validator.unobtrusive.adapters.add(
            'cognitopassword',
            ['minlength', 'maxlength', 'requiredchars'],
            function (options) {
                options.rules['cognitopassword'] = [
                    parseInt(options.params['minlength']),
                    parseInt(options.params['maxlength']),
                    parseInt(options.params['requiredchars'])
                ];

                options.messages['cognitopassword'] = 'Password does not meet requirements.';
            }
        );

        $.validator.addMethod('confirm', RecruitmentFailValidation.validateConfirm);
        $.validator.unobtrusive.adapters.add(
            'confirm',
            ['matchingfieldname'],
            function (options) {
                let matchingFieldName = options.params['matchingfieldname'];
                let context = options.form;

                options.rules['confirm'] = [context, matchingFieldName];
                options.messages['confirm'] = 'New Password fields must match.';
            }
        );


        $(document).ready(function($) {
            // configure success dialog

            let successDlgDiv = $("#successDlg")[0];
            let successDlgObj = new bootstrap.Modal(successDlgDiv, { backdrop: 'static' });

            $(successDlgDiv)
                .on('shown.bs.modal', function () {
                    $(successDlgDiv).trigger('focus');
                })
                .on(
                    'hidden.bs.modal',
                        function(e){
                        window.location = '@Url.Content("~/")';
                    }
                );

            $("#changeForm .submit").click(function (e) {
                let formQuery = $(e.target).closest("form");
                let formObj = formQuery[0];
                try {
                    formQuery.validate();

                    if (formQuery.valid()) {
                        //disable form
                        formQuery.find(":input").prop("disabled", true);

                        let action = formObj.action;
                        let oldPassword = formQuery.find("input[name=OldPassword]").val();
                        let newPassword = formQuery.find("input[name=NewPassword]").val();
                        let newPasswordConfirm = formQuery.find("input[name=NewPasswordConfirm]").val();

                        $.post({
                            url: action,
                            data: {
                                oldPassword: oldPassword,
                                newPassword: newPassword,
                                newPasswordConfirm: newPasswordConfirm
                            },
                            dataType: 'text',
                            complete: function (resp, status) {
                                formQuery.find(":input").prop("disabled", false);
                            },
                            success: function (data, status, resp) {
                                successDlgObj.show();
                            },
                            error: function (resp, status, errMsg) {
                                $(".response-error").html(resp.responseText);
                            }
                        });
                    }

                } catch (e) {
                    $(".response-error").html(e);
                    formQuery.find(":input").prop("disabled", false);
                    return false;
                }

                return false;
            });


        });


    </script>
}
